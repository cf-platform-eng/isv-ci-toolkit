---
resource_types:
  - name: pcf-pool
    type: registry-image
    source:
      repository: ((artifactory.registry_mirror))/cftoolsmiths/toolsmiths-envs-resource
      username: ((artifactory.production_username))
      password: ((artifactory.production_password))

resources:
  - name: base-image-source
    type: git
    source:
      paths:
        - base-image/*
        - base-image/**/*
      uri: git@github.com:cf-platform-eng/isv-ci-toolkit.git
      private_key: ((github.private_key))

  - name: marman-image
    type: registry-image
    check_every: 4h
    icon: oci
    source:
      repository: tas-ecosystem-docker-prod-local.usw1.packages.broadcom.com/tanzu-isv-engineering/marman
      tag: 0.5.0
      username: ((artifactory.production_username))
      password: ((artifactory.production_password))

  - name: om-image
    type: registry-image
    source:
      repository: tas-ecosystem-docker-prod-local.usw1.packages.broadcom.com/tanzu-isv-engineering/om
      tag: 7.7.0
      username: ((artifactory.production_username))
      password: ((artifactory.production_password))

  - name: pivnet-image
    type: registry-image
    check_every: 4h
    icon: oci
    source:
      repository: tas-ecosystem-docker-prod-local.usw1.packages.broadcom.com/partner-engineering/pivnet
      tag: 3.0.1
      username: ((artifactory.production_username))
      password: ((artifactory.production_password))

  - name: tileinspect-image
    type: registry-image
    check_every: 4h
    icon: oci
    source:
      repository: tas-ecosystem-docker-prod-local.usw1.packages.broadcom.com/tanzu-isv-engineering/tileinspect
      tag: latest
      username: ((artifactory.production_username))
      password: ((artifactory.production_password))

  - name: cf-image
    type: registry-image
    check_every: 4h
    icon: oci
    source:
      repository: tas-ecosystem-docker-prod-local.usw1.packages.broadcom.com/tanzu-isv-engineering/cf
      tag: 8.5.0
      username: ((artifactory.production_username))
      password: ((artifactory.production_password))

  - name: toolkit-image
    type: registry-image
    check_every: 4h
    icon: oci
    source:
      repository: tas-ecosystem-docker-prod-local.usw1.packages.broadcom.com/partner-engineering/isv-ci-toolkit
      tag: 0.0.35
      username: ((artifactory.production_username))
      password: ((artifactory.production_password))

  - name: base-image
    type: registry-image
    check_every: 4h
    icon: oci
    source:
      repository: tas-ecosystem-docker-prod-local.usw1.packages.broadcom.com/tanzu-isv-engineering/base-image
      tag: 0.0.62
      username: ((artifactory.production_username))
      password: ((artifactory.production_password))

  - name: oci-build-task
    type: registry-image
    check_every: 4h
    icon: oci
    source:
      repository: ((artifactory.registry_mirror))/concourse/oci-build-task
      tag: 0.11.1
      username: ((artifactory.production_username))
      password: ((artifactory.production_password))

  - name: source
    type: git
    source:
      paths:
        - tests/install-uninstall-pas-tile/*
        - tests/install-uninstall-pas-tile/**/*
      uri: git@github.com:cf-platform-eng/isv-ci-toolkit.git
      private_key: ((github.private_key))

  - name: install-uninstall-test-image
    type: registry-image
    icon: oci
    source:
      repository: tas-ecosystem-docker-prod-local.usw1.packages.broadcom.com/tanzu-isv-engineering/install-uninstall-test-image
      username: ((artifactory.production_username))
      password: ((artifactory.production_password))

  - name: install-uninstall-test-image-acceptance
    type: registry-image
    icon: docker
    source:
      repository: tas-ecosystem-docker-prod-local.usw1.packages.broadcom.com/tanzu-isv-engineering/install-uninstall-test-image
      username: ((artifactory.production_username))
      password: ((artifactory.production_password))
      tag: acceptance

  - name: install-uninstall-test-image-production
    type: registry-image
    icon: docker
    source:
      repository: tas-ecosystem-docker-prod-local.usw1.packages.broadcom.com/tanzu-isv-engineering/install-uninstall-test-image
      username: ((artifactory.production_username))
      password: ((artifactory.production_password))
      tag: production

  - name: runtime-config-only-tile-source
    type: git
    icon: github
    source:
      uri: git@github.com:cf-platform-eng/test-pas-tiles.git
      private_key: ((github.private_key))
      paths:
        - runtime-config-only

  - name: app-only-tile-source
    type: git
    icon: github
    source:
      uri: git@github.com:cf-platform-eng/test-pas-tiles.git
      private_key: ((github.private_key))
      paths:
        - app-only

  - name: bosh-release-tile-source
    type: git
    icon: github
    source:
      uri: git@github.com:cf-platform-eng/pcf-examples.git
      private_key: ((github.private_key))

  - name: pas-pool
    type: pcf-pool
    source:
      api_token: ((toolsmiths_api_token))
      hostname: environments.toolsmiths.cf-app.com
      pool_name: us_2_13

  - name: tile-generator
    type: registry-image
    icon: docker
    source:
      repository: ((artifactory.registry_mirror))/tile-generator
      username: ((artifactory.production_username))
      password: ((artifactory.production_password))
      tag: latest

  - name: version
    type: semver
    source:
      driver: git
      uri: ((github.org_url))/isv-ci-versions.git
      branch: main
      file: install-uninstall-pas-tile-image
      username: ((github.username))
      password: ((github.broadcom_github_personal_access_token))

  - name: dcind
    type: registry-image
    icon: docker
    source:
      repository: ((artifactory.registry_mirror))/amidos/dcind
      username: ((artifactory.production_username))
      password: ((artifactory.production_password))

  - name: custom-test-image
    type: registry-image
    icon: docker
    source:
      repository: tas-ecosystem-docker-prod-local.usw1.packages.broadcom.com/partner-engineering/z-pe-test-pas-tile-install-test
      username: ((artifactory.production_username))
      password: ((artifactory.production_password))

  - name: custom-test-source
    type: git
    icon: github
    source:
      uri: git@github.com:cf-platform-eng/test-pas-tiles.git
      private_key: ((github.private_key))
      paths:
        - app-only/install-test

jobs:
  - name: build
    serial_groups: [version]
    plan:
      - in_parallel:
        - get: source
          trigger: true
        - get: version
          params: { pre: rc }
        - get: oci-build-task
        - get: base-image-source
        - get: marman-image
          params:
            format: oci
        - get: om-image
          params:
            format: oci
        - get: pivnet-image
          params:
            format: oci
        - get: tileinspect-image
          params:
            format: oci
        - get: cf-image
          params:
            format: oci
        - get: toolkit-image
          params:
            format: oci
        - get: base-image
          params:
            format: oci
      - task: build-oci
        privileged: true
        image: oci-build-task
        config:
          platform: linux
          inputs:
            - name: source
            - name: base-image-source
            - name: marman-image
            - name: om-image
            - name: pivnet-image
            - name: tileinspect-image
            - name: cf-image
            - name: toolkit-image
            - name: base-image
          outputs:
            - name: image
          params:
            CONTEXT: source/tests/install-uninstall-pas-tile
            DOCKERFILE: source/tests/install-uninstall-pas-tile/Dockerfile
            IMAGE_ARG_marman_image: marman-image/image.tar
            IMAGE_ARG_om_image: om-image/image.tar
            IMAGE_ARG_pivnet_image: pivnet-image/image.tar
            IMAGE_ARG_tileinspect_image: tileinspect-image/image.tar
            IMAGE_ARG_cf_image: cf-image/image.tar
            IMAGE_ARG_toolkit_image: toolkit-image/image.tar
            IMAGE_ARG_base_image: base-image/image.tar
          run:
            path: build
        output_mapping:
          image: base-image-out
      - file: version/version
        load_var: image_version
      - put: install-uninstall-test-image
        inputs: detect
        attempts: 3
        params:
          image: base-image-out/image.tar
          version: ((.:image_version))
          bump_aliases: true
      - put: version
        inputs: detect
        params: { file: version/version }

  - name: test-with-app-only-tile
    plan:
      - in_parallel:
        - get: dcind
        - get: tile-generator
        - get: app-only-tile-source
          trigger: true
        - get: install-uninstall-test-image
          passed:
            - build
          trigger: true
          params: {save: true}
      - task: build-app-only-tile
        image: tile-generator
        config:
          platform: linux
          inputs:
            - name: app-only-tile-source
          run:
            path: sh
            args:
              - -exc
              - |
                cat > tile-config/config.json <<EOL
                {
                    "product-properties": {
                        ".properties.space": {
                            "type": "string",
                            "value": "test-tile-space"
                        },
                        ".properties.allow_paid_service_plans": {
                            "type": "boolean",
                            "value": false
                        },
                        ".properties.apply_open_security_group": {
                            "type": "boolean",
                            "value": false
                        },
                        ".properties.org": {
                            "type": "string",
                            "value": "test-tile-org"
                        }
                    }
                }
                EOL
                echo "Saved configuration file:"
                cat tile-config/config.json

                cd app-only-tile-source/app-only

                echo "Building tile..."
                tile build
                cp product/*.pivotal ../../tile
                echo "Tile built:"
                ls ../../tile
          outputs:
            - name: tile
            - name: tile-config
      # claim is in series to make sure we dont claim envs we cant use
      - put: pas-pool
        inputs: detect
        params:
          action: claim
        # tags:
        #   - cf-isv-dashboard-shared-vsphere
      - task: run-tests
        image: dcind
        privileged: true
        config:
          params:
            PIVNET_TOKEN: ((pivnet_token))
          platform: linux
          inputs:
            - name: pas-pool
            - name: install-uninstall-test-image
            - name: tile
            - name: tile-config
          outputs:
            - name: logs
          run:
            path: bash
            args:
              - -exc
              - |
                apk add jq
                source /docker-lib.sh
                start_docker

                docker load -i install-uninstall-test-image/image
                IMAGE_TAG="$(cat install-uninstall-test-image/repository):$(cat install-uninstall-test-image/tag)"
                docker tag "$(cat install-uninstall-test-image/image-id)" "${IMAGE_TAG}"

                export OM_TARGET=$(cat pas-pool/metadata | jq -r ".ops_manager.url")
                export OM_USERNAME=$(cat pas-pool/metadata | jq -r ".ops_manager.username")
                export OM_PASSWORD=$(cat pas-pool/metadata | jq -r ".ops_manager.password")
                export OM_SKIP_SSL_VALIDATION=true

                TILE_PATH=$(ls tile/*.pivotal)
                TILE_CONFIG_PATH=tile-config/config.json
                docker run \
                  -e OM_USERNAME \
                  -e OM_PASSWORD \
                  -e OM_TARGET \
                  -e OM_SKIP_SSL_VALIDATION \
                  -e USE_SELECTIVE_DEPLOY \
                  -e PIVNET_TOKEN \
                  -v $(pwd)/$(ls tile/*.pivotal):/input/tile.pivotal \
                  -v $(pwd)/tile-config/config.json:/input/config.json \
                  "${IMAGE_TAG}" 2>&1 | tee logs/test.log
                if [ ${PIPESTATUS[0]} -ne 0 ] ; then
                    exit 1
                fi

        ensure:
          put: pas-pool
          inputs: detect
          params:
            action: unclaim
            env_file: pas-pool/metadata

  - name: test-with-bosh-release-tile
    plan:
      - in_parallel:
        - get: dcind
        - get: tile-generator
        - get: bosh-release-tile-source
          trigger: true
        - get: install-uninstall-test-image
          passed:
            - build
          trigger: true
          params: {save: true}
      - task: build-tile
        image: tile-generator
        config:
          platform: linux
          inputs:
            - name: bosh-release-tile-source
          run:
            path: sh
            args:
              - -exc
              - |
                apt-get update && apt-get -y install zip

                cat > tile-config/config.json <<EOL
                {
                    "product-properties": {
                        ".properties.space": {
                            "type": "string",
                            "value": "test-tile-space"
                        },
                        ".properties.allow_paid_service_plans": {
                            "type": "boolean",
                            "value": false
                        },
                        ".properties.apply_open_security_group": {
                            "type": "boolean",
                            "value": false
                        },
                        ".properties.org": {
                            "type": "string",
                            "value": "test-tile-org"
                        }
                    }
                }
                EOL
                echo "Saved configuration file:"
                cat tile-config/config.json

                cd bosh-release-tile-source/tile-for-bosh-simple

                echo "Building tile..."
                ./package.sh

                cp product/*.pivotal ../../tile
                echo "Tile built:"
                ls ../../tile
          outputs:
            - name: tile
            - name: tile-config
      # claim is in series to make sure we dont claim envs we cant use
      - put: pas-pool
        inputs: detect
        params:
          action: claim
        # tags:
        #   - cf-isv-dashboard-shared-vsphere
      - task: run-tests
        image: dcind
        privileged: true
        config:
          params:
            PIVNET_TOKEN: ((pivnet_token))
          platform: linux
          inputs:
            - name: pas-pool
            - name: install-uninstall-test-image
            - name: tile
            - name: tile-config
          outputs:
            - name: logs
          run:
            path: bash
            args:
              - -exc
              - |
                apk add jq
                source /docker-lib.sh
                start_docker

                docker load -i install-uninstall-test-image/image
                IMAGE_TAG="$(cat install-uninstall-test-image/repository):$(cat install-uninstall-test-image/tag)"
                docker tag "$(cat install-uninstall-test-image/image-id)" "${IMAGE_TAG}"

                export OM_TARGET=$(cat pas-pool/metadata | jq -r ".ops_manager.url")
                export OM_USERNAME=$(cat pas-pool/metadata | jq -r ".ops_manager.username")
                export OM_PASSWORD=$(cat pas-pool/metadata | jq -r ".ops_manager.password")
                export OM_SKIP_SSL_VALIDATION=true

                TILE_PATH=$(ls tile/*.pivotal)
                TILE_CONFIG_PATH=tile-config/config.json
                docker run \
                  -e OM_USERNAME \
                  -e OM_PASSWORD \
                  -e OM_TARGET \
                  -e OM_SKIP_SSL_VALIDATION \
                  -e USE_SELECTIVE_DEPLOY \
                  -e PIVNET_TOKEN \
                  -v $(pwd)/$(ls tile/*.pivotal):/input/tile.pivotal \
                  -v $(pwd)/tile-config/config.json:/input/config.json \
                  "${IMAGE_TAG}" 2>&1 | tee logs/test.log
                if [ ${PIPESTATUS[0]} -ne 0 ] ; then
                    exit 1
                fi
        ensure:
          put: pas-pool
          inputs: detect
          params:
            action: unclaim
            env_file: pas-pool/metadata
          # tags:
          #   - cf-isv-dashboard-shared-vsphere

  - name: test-with-selective-deploy
    plan:
      - in_parallel:
        - get: dcind
        - get: tile-generator
        - get: app-only-tile-source
          trigger: true
        - get: install-uninstall-test-image
          passed:
            - build
          trigger: true
          params: {save: true}
      - task: build-app-only-tile
        image: tile-generator
        config:
          platform: linux
          inputs:
            - name: app-only-tile-source
          run:
            path: sh
            args:
              - -exc
              - |
                cat > tile-config/config.json <<EOL
                {
                    "product-properties": {
                        ".properties.space": {
                            "type": "string",
                            "value": "test-tile-space"
                        },
                        ".properties.allow_paid_service_plans": {
                            "type": "boolean",
                            "value": false
                        },
                        ".properties.apply_open_security_group": {
                            "type": "boolean",
                            "value": false
                        },
                        ".properties.org": {
                            "type": "string",
                            "value": "test-tile-org"
                        }
                    }
                }
                EOL
                echo "Saved configuration file:"
                cat tile-config/config.json

                cd app-only-tile-source/app-only

                echo "Building tile..."
                tile build
                cp product/*.pivotal ../../tile
                echo "Tile built:"
                ls ../../tile
          outputs:
            - name: tile
            - name: tile-config
      # claim is in series to make sure we dont claim envs we cant use
      - put: pas-pool
        inputs: detect
        params:
          action: claim
        # tags:
        #   - cf-isv-dashboard-shared-vsphere
      - task: run-tests
        image: dcind
        privileged: true
        config:
          params:
            PIVNET_TOKEN: ((pivnet_token))
          platform: linux
          inputs:
            - name: pas-pool
            - name: install-uninstall-test-image
            - name: tile
            - name: tile-config
          outputs:
            - name: logs
          run:
            path: bash
            args:
              - -exc
              - |
                apk add jq
                source /docker-lib.sh
                start_docker

                docker load -i install-uninstall-test-image/image
                IMAGE_TAG="$(cat install-uninstall-test-image/repository):$(cat install-uninstall-test-image/tag)"
                docker tag "$(cat install-uninstall-test-image/image-id)" "${IMAGE_TAG}"

                export OM_TARGET=$(cat pas-pool/metadata | jq -r ".ops_manager.url")
                export OM_USERNAME=$(cat pas-pool/metadata | jq -r ".ops_manager.username")
                export OM_PASSWORD=$(cat pas-pool/metadata | jq -r ".ops_manager.password")
                export OM_SKIP_SSL_VALIDATION=true
                export USE_SELECTIVE_DEPLOY=true

                TILE_PATH=$(ls tile/*.pivotal)
                TILE_CONFIG_PATH=tile-config/config.json
                docker run \
                  -e OM_USERNAME \
                  -e OM_PASSWORD \
                  -e OM_TARGET \
                  -e OM_SKIP_SSL_VALIDATION \
                  -e USE_SELECTIVE_DEPLOY \
                  -e PIVNET_TOKEN \
                  -v $(pwd)/$(ls tile/*.pivotal):/input/tile.pivotal \
                  -v $(pwd)/tile-config/config.json:/input/config.json \
                  "${IMAGE_TAG}" 2>&1 | tee logs/test.log
                if [ ${PIPESTATUS[0]} -ne 0 ] ; then
                    exit 1
                fi
        ensure:
          put: pas-pool
          inputs: detect
          params:
            action: unclaim
            env_file: pas-pool/metadata
          # tags:
          #   - cf-isv-dashboard-shared-vsphere

  - name: test-with-runtime-config-tile
    plan:
      - in_parallel:
        - get: dcind
        - get: tile-generator
        - get: runtime-config-only-tile-source
          trigger: true
        - get: install-uninstall-test-image
          trigger: true
          passed:
            - build
          params:
            save: true
      - task: build-runtime-config-only-tile
        image: tile-generator
        config:
          platform: linux
          inputs:
            - name: runtime-config-only-tile-source
          run:
            path: sh
            args:
              - -exc
              - |
                cat > tile-config/config.json <<EOL
                {
                  "product-properties": {
                    ".properties.login_message": {
                      "value": "Welcome to a VM with this add-on!"
                    }
                  }
                }
                EOL
                echo "Saved configuration file:"
                cat tile-config/config.json
                cd runtime-config-only-tile-source/runtime-config-only

                echo "Building tile..."
                wget --output-document=resources/os-conf-release-21.0.0.tgz https://bosh.io/d/github.com/cloudfoundry/os-conf-release?v=21.0.0
                tile build
                cp product/*.pivotal ../..//tile
                echo "Tile built:"
                ls ../../tile
          outputs:
            - name: tile
            - name: tile-config

      # claim is in series to make sure we dont claim envs we cant use
      - put: pas-pool
        inputs: detect
        params:
          action: claim
        # tags:
        #   - cf-isv-dashboard-shared-vsphere

      - task: run-test
        image: dcind
        privileged: true
        config:
          params:
            PIVNET_TOKEN: ((pivnet_token))
          platform: linux
          inputs:
            - name: pas-pool
            - name: install-uninstall-test-image
            - name: tile
            - name: tile-config
          outputs:
            - name: logs
          run:
            path: bash
            args:
              - -exc
              - |
                apk add jq
                source /docker-lib.sh
                start_docker

                docker load -i install-uninstall-test-image/image
                IMAGE_TAG="$(cat install-uninstall-test-image/repository):$(cat install-uninstall-test-image/tag)"
                docker tag "$(cat install-uninstall-test-image/image-id)" "${IMAGE_TAG}"

                export OM_TARGET=$(cat pas-pool/metadata | jq -r ".ops_manager.url")
                export OM_USERNAME=$(cat pas-pool/metadata | jq -r ".ops_manager.username")
                export OM_PASSWORD=$(cat pas-pool/metadata | jq -r ".ops_manager.password")
                export OM_SKIP_SSL_VALIDATION=true

                TILE_PATH=$(ls tile/*.pivotal)
                TILE_CONFIG_PATH=tile-config/config.json
                docker run \
                  -e OM_USERNAME \
                  -e OM_PASSWORD \
                  -e OM_TARGET \
                  -e OM_SKIP_SSL_VALIDATION \
                  -e USE_SELECTIVE_DEPLOY \
                  -e PIVNET_TOKEN \
                  -v $(pwd)/$(ls tile/*.pivotal):/input/tile.pivotal \
                  -v $(pwd)/tile-config/config.json:/input/config.json \
                  "${IMAGE_TAG}" 2>&1 | tee logs/test.log
                if [ ${PIPESTATUS[0]} -ne 0 ] ; then
                    exit 1
                fi
        ensure:
          put: pas-pool
          inputs: detect
          params:
            action: unclaim
            env_file: pas-pool/metadata
          # tags:
          #   - cf-isv-dashboard-shared-vsphere

  - name: release-acceptance
    serial_groups: [version]
    plan:
      - in_parallel:
        - get: install-uninstall-test-image
          trigger: true
          params:
            save: true
          passed:
            - test-with-app-only-tile
            - test-with-selective-deploy
            - test-with-bosh-release-tile
            - test-with-runtime-config-tile
        - get: version
          params: { bump: final }
      - file: version/version
        load_var: image_version
      - put: install-uninstall-test-image-acceptance
        inputs: detect
        attempts: 3
        params:
          image: install-uninstall-test-image/image.tar
          version: ((.:image_version))
          bump_aliases: true
      - put: version
        inputs: detect
        params: { bump: patch }

  - name: promote
    plan:
      - in_parallel:
        - get: install-uninstall-test-image
          params:
            format: oci
          passed:
            - release-acceptance
      - put: install-uninstall-test-image-production
        inputs: detect
        params:
          image: install-uninstall-test-image/image.tar

  - name: make-custom-test-image
    plan:
      - in_parallel:
        - get: custom-test-source
          trigger: true
        - get: install-uninstall-test-image-acceptance
          trigger: true
          passed:
            - release-acceptance
        - get: oci-build-task
      - task: build-oci
        privileged: true
        image: oci-build-task
        config:
          platform: linux
          inputs:
            - name: base-image-source
          outputs:
            - name: image
          params:
            CONTEXT: custom-test-source/app-only/install-test
            DOCKERFILE: custom-test-source/app-only/install-test/Dockerfile
          run:
            path: build
        output_mapping:
          image: custom-test-image-out
      - put: custom-test-image
        inputs: detect
        params:
          image: custom-test-image-out/image.tar
          bump_aliases: true

  - name: bump-major-version
    serial_groups: [version]
    plan:
      - put: version
        inputs: detect
        params:
          bump: major

  - name: bump-minor-version
    serial_groups: [version]
    plan:
      - put: version
        inputs: detect
        params:
          bump: minor
